<?php

namespace App\Controller;

use App\Entity\Blog;
use App\Form\BlogType;
use App\Entity\Comment;
use App\Repository\BlogRepository;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\HttpFoundation\Request;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\File\File;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\File\Exception\FileException;

class AdminBlogController extends AbstractController
{

    /**
     * @Route("/admin/blogs", name="admin_blogs")
     */
    public function index(BlogRepository $repo)
    {
        $this->denyAccessUnlessGranted('IS_AUTHENTICATED_FULLY');
        $blogs = $repo->findAll();
        return $this->render('admin_blog/index.html.twig', [
            'blogs' => $blogs
        ]);
    }

    /**
     * @Route("/admin/blogs/new", name="admin_blogs_create")
     * @Route("/admin/blogs/{id}/edit", name="admin_blogs_edit")
     */
    public function manage(Request $request, EntityManagerInterface $manager, Blog $blog = null, Filesystem $fileSystem)
    {
        $this->denyAccessUnlessGranted('IS_AUTHENTICATED_FULLY');
        if (!$blog) {
            $blog = new blog();
        }

        $editMode = $blog->getId() != null;
        if($editMode){
            $name = $blog->getData()->getName();
        }

        $form = $this->createForm(BlogType::class, $blog);

        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $noneChange = false;
            if($editMode && $blog->getData()->getName() != null){
                $fileSystem->remove($this->getParameter('data_directory').'/'.$name);
            } elseif($editMode && $blog->getData()->getName() == null){
                $blog->getData()->setName($name);
                $noneChange = true;
            }

            if(!$noneChange){
                /** @var Symfony\Component\HttpFoundation\File\UploadedFile $file */
                $file = $blog->getData()->getName();

                $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();

                $blog->getData()->setExtension($file->guessExtension());
                // Move the file to the directory where brochures are stored
                try {
                    $file->move(
                        $this->getParameter('data_directory'),
                        $fileName
                    );
                } catch (FileException $e) {
                    // ... handle exception if something happens during file upload
                }
                $blog->getData()->setName($fileName);
                $blog->setDate(new \DateTime('now'));
            }
            

            $manager->persist($blog);
            $manager->flush();

            if (!$editMode) {
                $this->addFlash('success', 'Blog créé');
            } else {
                $this->addFlash('success', 'Blog modifié');
            }

            return $this->redirectToRoute('admin_blogs');
        }

        $comments = $blog->getComments();

        return $this->render('admin_blog/manage.html.twig', [
            'form' => $form->createView(),
            'editMode' => $editMode,
            'blog' => $blog,
            'comments' => $comments
        ]);
    }

    /**
     * @Route("/admin/blogs/{id}/delete", name="admin_blogs_delete")
     */
    public function delete(Blog $blog, EntityManagerInterface $manager, Filesystem $fileSystem)
    {
        $this->denyAccessUnlessGranted('IS_AUTHENTICATED_FULLY');
        $fileSystem->remove($this->getParameter('data_directory').'/'.$blog->getData()->getName());
        $manager->remove($blog);
        $manager->flush();
        $this->addFlash('success', 'Blog supprimé');
        return $this->redirectToRoute('admin_blogs');
    }

    /**
     * @Route("/admin/blogs/comment/{id}/delete", name="admin_blogs_comment_delete")
     */
    public function deleteComment(Comment $comment, EntityManagerInterface $manager, Filesystem $fileSystem)
    {
        $this->denyAccessUnlessGranted('IS_AUTHENTICATED_FULLY');
        $id = $comment->getBlog()->getId();
        $manager->remove($comment);
        $manager->flush();
        $this->addFlash('success', 'Commentaire supprimé');
        return $this->redirectToRoute('admin_blogs_edit', array(
            'id' => $id
        ));
    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
}
