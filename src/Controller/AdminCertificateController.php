<?php

namespace App\Controller;

use App\Entity\Certificate;
use App\Form\CertificateType;
use Doctrine\ORM\EntityManagerInterface;
use App\Repository\CertificateRepository;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\File\File;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\File\Exception\FileException;

class AdminCertificateController extends AbstractController
{

    /**
     * @Route("/admin/certificates", name="admin_certificates")
     */
    public function index(CertificateRepository $repo)
    {
        $this->denyAccessUnlessGranted('IS_AUTHENTICATED_FULLY');
        $certificates = $repo->findAll();
        return $this->render('admin_certificates/index.html.twig', [
            'certificates' => $certificates
        ]);
    }

    /**
     * @Route("/admin/certificates/new", name="admin_certificates_create")
     * @Route("/admin/certificates/{id}/edit", name="admin_certificates_edit")
     */
    public function manage(Request $request, EntityManagerInterface $manager, Certificate $certificate = null, Filesystem $fileSystem)
    {
        $this->denyAccessUnlessGranted('IS_AUTHENTICATED_FULLY');
        if (!$certificate) {
            $certificate = new Certificate();
        }

        $editMode = $certificate->getId() != null;
        if($editMode){
            $name = $certificate->getData()->getName();
        }

        $form = $this->createForm(CertificateType::class, $certificate);

        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $noneChange = false;
            if($editMode && $certificate->getData()->getName() != null){
                $fileSystem->remove($this->getParameter('data_directory').'/'.$name);
            } elseif($editMode && $certificate->getData()->getName() == null){
                $certificate->getData()->setName($name);
                $noneChange = true;
            }

            if(!$noneChange){
                /** @var Symfony\Component\HttpFoundation\File\UploadedFile $file */
                $file = $certificate->getData()->getName();

                $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();

                $certificate->getData()->setExtension($file->guessExtension());
                // Move the file to the directory where brochures are stored
                try {
                    $file->move(
                        $this->getParameter('data_directory'),
                        $fileName
                    );
                } catch (FileException $e) {
                    $this->addFlash('error', 'Une erreur est survenue');
                    return $this->redirectToRoute('admin_certificates');
                }
                $certificate->getData()->setName($fileName);
            }
            

            $manager->persist($certificate);
            $manager->flush();

            if (!$editMode) {
                $this->addFlash('success', 'Certificate créé');
            } else {
                $this->addFlash('success', 'Certificate modifié');
            }

            return $this->redirectToRoute('admin_certificates');
        }

        return $this->render('admin_certificates/manage.html.twig', [
            'form' => $form->createView(),
            'editMode' => $editMode,
            'certificate' => $certificate
        ]);
    }

    /**
     * @Route("/admin/certificates/{id}/delete", name="admin_certificates_delete")
     */
    public function delete(Certificate $certificate, EntityManagerInterface $manager, Filesystem $fileSystem)
    {
        $this->denyAccessUnlessGranted('IS_AUTHENTICATED_FULLY');
        $fileSystem->remove($this->getParameter('data_directory').'/'.$certificate->getData()->getName());
        $manager->remove($certificate);
        $manager->flush();
        $this->addFlash('success', 'Certificate supprimé');
        return $this->redirectToRoute('admin_certificates');
    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
}
